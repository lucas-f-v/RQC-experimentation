name: Python File Commit Trigger

on:
  push:
    paths:
      - '**/*.py'
  workflow_dispatch:

jobs:
  main:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract File from Commit
        id: extract_file
        run: |
          # Debug: Show the latest commit hash
          echo "Latest commit hash:"
          git rev-parse HEAD
      
          # Debug: Show the details of the latest commit
          echo "Latest commit details:"
          git show --name-only --oneline $(git rev-parse HEAD)
          # Debug: Show all files in the repository
          echo "All files in the repository:"
          ls -R
      
          # Debug: Show the files changed in the latest commit
          echo "Files changed in the latest commit:"
          git diff-tree --no-commit-id --name-only -r $(git rev-parse HEAD)
      
          # Get the most recent Python file from the latest commit
          # Get the most recently modified Python file from the latest commit
          pyfile_name=$(git show --name-only --pretty="" $(git rev-parse HEAD) | grep '\.py$' | xargs -I {} stat -c "%Y %n" {} | sort -n | head -n 1 | cut -d' ' -f2-)
      
          # Debug: Show the extracted Python file name
          echo "Extracted Python file name: $pyfile_name"
      
          # Store the Python file name in the environment variable
          echo "pyfile_name=$pyfile_name" >> $GITHUB_ENV
      - name: Showing discrepancies
        run: |
          git diff --name-only HEAD~1 HEAD
      - name: Read and Transform Python File Content
        id: transform_to_json
        run: |
          # Read the content of the Python file
          python_code=$(cat $pyfile_name)
      
          # Sanitize the Python code
          sanitized_code=$(echo "$python_code" | jq -Rs .)
      
          # Create the JSON structure
          json_data=$(echo "{\"input_data\": $sanitized_code}" | jq -c .)
      
          # Store the JSON data in an environment variable
          echo "json_data=$json_data" >> $GITHUB_ENV

      - name: Display JSON Data
        run: |
          echo "Transformed JSON data: $json_data"

      - name: Get Bearer Token
        id: get_token
        run: |
          response=$(curl --location --request POST 'https://idm.stackspot.com/stackspot/oidc/oauth/token' \
          --header 'Content-Type: application/x-www-form-urlencoded' \
          --data-urlencode 'client_id=f4096bfc-7f7c-4401-806f-411b19bd0959' \
          --data-urlencode 'grant_type=client_credentials' \
          --data-urlencode 'client_secret=UTY6zw5iUTY12989210fwDFND9r2A0RjTK0REXBRMYLkWD3LDD2In6KO07LEQeG4')
          echo "response=$response"
          token=$(echo $response | grep -oP '(?<="access_token":")[^"]*')
          echo "::set-output name=token::$token"

      - name: RQC1-post
        id: execute_rqc
        run: |
          token="${{ steps.get_token.outputs.token }}"
          response=$(curl -s -w "\n%{http_code}" -X POST "https://genai-code-buddy-api.stackspot.com/v1/quick-commands/create-execution/is-it-vulnerable" \
          -H "Authorization: Bearer $token" \
          -H "Content-Type: application/json" \
          -d "$json_data")
          # Extract the status code and response body
          status_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | sed '$d')
          # Extract execution_id from the response body
          # Print the status code, response body
          echo "status_code=$status_code"
          echo "response_body=$response_body"
          # Set GitHub Actions outputs
          echo "::set-output name=status_code::$status_code"
          echo "::set-output name=api_response::$response_body"

      - name: Check API Response Status
        run: |
          if [ "${{ steps.execute_rqc.outputs.status_code }}" -eq 200 ]; then
            echo "Request was successful!"
          else
            echo "Request failed with status code ${{ steps.execute_rqc.outputs.status_code }}"
            exit 1
          fi

      - name: Display API Response
        run: |
          echo "API Response: ${{ steps.execute_rqc.outputs.api_response }}"

      - name: Get Execution Status
        id: get_execution_status
        run: |
          token="${{steps.get_token.outputs.token}}"
          execution_id="${{steps.execute_rqc.outputs.api_response}}"
          while true; do
            response=$(curl -s -X GET "https://genai-code-buddy-api.stackspot.com/v1/quick-commands/callback/$execution_id" \
            -H "Authorization: Bearer $token")
            # Print the response 
            echo "Execution Status Response: $response"
            status=$(echo "$response" | grep -oP '(?<="status":")[^"]*')
            if [ "$status" != "RUNNING" ] && [ "$status" != "CREATED" ]; then
              break
            fi
            echo "Execution is still running, checking again in 5 seconds..."
            sleep 5
          done
          echo "::set-output name=response::$response"
      - name: Extract LLM Response
        id: extract-llm-response
        run: |
          response='${{steps.get_execution_status.outputs.response}}'
          echo "Execution Status FULL Response: $response"
          response_field=$(echo "$response" | grep -o '"result":"[^"]*' | sed 's/"result":"//')
          echo "Execution Status Result:$response_field"
          echo "::set-output name=response_field::$response_field"


      - name: Is it vulnerable?
        id: vulnerability-check
        run: |
          response_field='${{steps.extract-llm-response.outputs.response_field}}'

          if [ "$(echo "$response_field" | tr '[:upper:]' '[:lower:]')" = "true" ]; then
            echo "Execution Status Result: $response_field"
            echo "Pipeline will break as there are vulnerabilities."
            exit 1
          else
            echo "Execution Status Result: $response_field"
            echo "Pipeline continues as the code is not vulnerable."
          fi